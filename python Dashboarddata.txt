filtered_df["month_year"] = filtered_df["order Date"].dt.to_period("M")
st.subheader('Time Series Analysis')


linechart = pd.DataFrame (filtered_df.groupby(filtered_df["month_year"].dt.strftime("%Y : %b"))["sale"].sum()).reset_index()
fig2 = px.line(linechart, x = "month_year", y = "Sales", labels = {"Sales" : "Amount"},height=500, width = 1000, template="gridon")
st.plotly_chart(fig2,use_container_width=true)

#Download Data button
with st.expander("View Data of TimeSeries:"):
     st.write(linechart.T.style.background_gradient(cmap="Blues"))
     Csv = linechart.to_csv(index=False).encode("utf-8")
     st.download_button('Download Data', data = csv, file_name = "TimeSeries.csv",mime ='text/csv')

#Create a treem based on Region, Category, Sub-category

st.subheader("Hierarchical view of Sales using TreeMap")
fig3 = px.treemap(filtered_df, path = ["Region","Category","Sub-Category"],values = "Sales", hover_data =["Sales"],
                  color = "Sub-Category")
fig3.update_layout(width = 800, height = 650
st.plotly_chart(fig3, use_container_width = True)

chart1, chart2 = st.columns((2))

with chart1:
     st.subheader('Segment wise Sales')
     fig = px.pie(filtered_df, values = "Sales", names = "Segment", template = "plotly_dark")
     fig.update_traces(text = filtered_df["Segment"], textposition = "inside")
     st.plotly_chart(fig,use_container_width=True)


with chart2:
     st.subheader('Category wise Sales')
     fig = px.pie(filtered_df, values = "Sales", names = "Category", template = "plotly_dark")
     fig.update_traces(text = filtered_df["Category"], textposition = "inside")
     st.plotly_chart(fig,use_container_width=True)

import plotly.figure as ff
st.subheader(:point_right: Month wise Sub-Category Sales summary")
with st.expander("Summary_Table"):
     df_sample = df[0:5][["Region","State","City","Category","Sales","Profit","Quantity"]]
     fig = ff.create_table(df_sample, colorscale = "Cividis")
     st.plotly_chart(fig, use_container_width = True)

st.markdown("Month wise sub-category Table")
filtered_df["month"] = filtered_df["Order Date"].dt.month_name()
sub-category_Year = pd.pivot_table(data = filtered_df, values = "Sales", index = ["Sub-Category"],columns = "month")
st.write(sub_category_Year.style.background_gradient(cmap="Blues"))


#Create a scatter plot

data1 = px.scatter(filtered_df, x = "Sales", y = "Profit", size = "Quantity")
data1['layout'].update(title="Relationship Between Sales and Profits using Scatter Plot.",
                       titlefont = dict(size=20),xaxis = dict(title="Sales",titlefont=dict(size=19)),
                       yaxis = dict(title = "Profit", titlefont = dict(size=19)))
st.plotly_chart(data1,use_container_width=True)

with st.expander("View Data")
     st.write(filtered_df.iloc[:500,1:20:2].style.background_gradient(cmap="Oranges"))

#Download orginal Dataset
csv = df.to_csv(index = False).encode('utf-8')
st.download_button('Dowload Data', data = csv, file_name = "Data.csv",mime = "text/csv")










